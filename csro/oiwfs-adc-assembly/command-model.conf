subsystem = MODHIS
component = oiwfs.adc

description = "OIWFS ADC Assembly Commands."

receive = [
   {
        name            = debug
        description     = """Change the assembly debug message level. (engineering)

    The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
    <ul>
    <li>    \b DEBUG: extra details as messages are processed   
    <li>    \b INFO : connections and command status
    <li>    \b WARN(ing) : unexpected events/messages/etc
    <li>    \b ERROR: failed to do something
    </ul>

    *Friendly Command.*
    
    Precondition:
    <ul>
    <li> state.cmd != UNINITIALIZED
    </ul>
    Execution:
    <ul>
    <li> none
    </ul>
    At Completion:
    <ul>
    <li> state.debug = {input debug}
    </ul>"""
        args = [
            {
                name        = debug
                description = target debug level
                enum        = [ DEBUG, INFO, WARN, ERROR ] 
            }
        ]
        requiredArgs = [ debug ]
   }
   {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files. (engineering)

This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move1 = false
<li> state.move2 = false
<li> state.move3 = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> config.posTolerance
<li> config.transDisp_Filename
<li> config.transMotor_Filename
<li> config.imageShift_Filename
<li> config.defaultOrientation
<li> config.defaultPower
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }
  {
        name = config
        description     = """Reads configuration files. (engineering)

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

This command does not otherwise alter the state of the assembly (i.e., unlike init, this command will not reset internal state variables).

*Discrete Command.*
    
Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> config.posTolerance
<li> config.transDisp_Filename
<li> config.transMotor_Filename
<li> config.imageShift_Filename
<li> config.defaultOrientation
<li> config.defaultPower
</ul>"""
        args = [
            {
                name        = configName 
                description = "Name of the configuration file to get from the TMT Configuration Service"
                type        = string
            }
            {
                name        = configVersion
                description = "Version of the configuration file to get from the TMT Configuration Service"
                type        = string 
            }
        ]
  }
  {
    name            = datum
    description     = """Datum the OIWFS ADC stages and prepares the assembly for operation.

If any stage is currently moving then this command will internally trigger a stop if required. This command will then position the ADC to a position based on a default power and orientation specified in the configuration file. 
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move1 = true
<li> state.move2 = true
<li> state.move3 = true
<li> current.datum1A = false
<li> current.datum1B = false
<li> current.datum2A = false
<li> current.datum2B = false
<li> current.datum3A = false
<li> current.datum3B = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move1 = false
<li> state.onTarget1 = true
<li> current.datum1A = true
<li> current.datum1B = true
<li> current.rotation1A {set based on current location}
<li> current.rotation1B {set based on current location}
<li> state.move2 = false
<li> state.onTarget2 = true
<li> current.datum2A = true
<li> current.datum2B = true
<li> current.rotation2A {set based on current location}
<li> current.rotation2B {set based on current location}
<li> state.move3 = false
<li> state.onTarget3 = true
<li> current.datum3A = true
<li> current.datum3B = true
<li> current.rotation3A {set based on current location}
<li> current.rotation3B {set based on current location}
</ul>"""
  }

  {
    name            = stop
    description     = """Cancel the current discrete or following command and stop all OIWFS ADC stages.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move1 = false
<li> state.onTarget1 = true
<li> current.rotation1A {set based on current location}
<li> current.rotation1B {set based on current location}
<li> state.move2 = false
<li> state.onTarget2 = true
<li> current.rotation2A {set based on current location}
<li> current.rotation2B {set based on current location}
<li> state.move3 = false
<li> state.onTarget3 = true
<li> current.rotation3A {set based on current location}
<li> current.rotation3B {set based on current location}
</ul>"""
  }

  {
        name = park
        description     = """Park all of the OIWFS ADC stages in their safe maintenance/servicing positions.

This command will internally trigger a stop if required and then move the stages to their park positions as specified in the configuration file.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
</ul>"""
    }

    {
        name = test
        description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCD.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    }

  {
    name            = move
    description     = """Engineering command to move individual OIWFS ADC stages to the specified positions. (calibration)
  
At least one input parameter must be specified, an unspecified stage will remain unchanged. Coordinates are provided in the native coordinate system FCRS<sub>MODHIS-POAi</sub>, for each of the i=1,2,3 probes.

The specified ADC stage(s) must be datumed otherwise this command will fail.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move1 = true
<li> state.move2 = true
<li> state.move3 = true
<li> target.rotation1A = {as given}
<li> target.rotation1B = {as given}
<li> target.rotation2A = {as given}
<li> target.rotation2B = {as given}
<li> target.rotation3A = {as given}
<li> target.rotation3B = {as given}
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move1 = false
<li> state.onTarget1 = true
<li> state.move2 = false
<li> state.onTarget2 = true
<li> state.move3 = false
<li> state.onTarget3 = true
<li> current.rotation1A {set based on current location}
<li> current.rotation1B {set based on current location}
<li> current.power1 = {set to current value}
<li> current.orientation1 = {set to current value}
<li> current.rotation2A {set based on current location}
<li> current.rotation2B {set based on current location}
<li> current.power2 = {set to current value}
<li> current.orientation2 = {set to current value}
<li> current.rotation3A {set based on current location}
<li> current.rotation3B {set based on current location}
<li> current.power3 = {set to current value}
<li> current.orientation3 = {set to current value}
</ul>"""
    args = [
      {
        name        = rotation1A
        description = "target OIWFS ADC 1 rotation A stage position in FCRS<sub>MODHIS-POA1</sub> coordinates."
        type        = double
        units       = degrees
      }
      {
        name        = rotation1B
        description = "target OIWFS ADC 1 rotation B stage position in FCRS<sub>MODHIS-POA1</sub> coordinates."
        type        = double
        units       = degrees
      }
      {
        name        = rotation2A
        description = "target OIWFS ADC 2 rotation A stage position in FCRS<sub>MODHIS-POA2</sub> coordinates."
        type        = double
        units       = degrees
      }
      {
        name        = rotation2B
        description = "target OIWFS ADC 2 rotation B stage position in FCRS<sub>MODHIS-POA2</sub> coordinates."
        type        = double
        units       = degrees
      }
      {
        name        = rotation3A
        description = "target OIWFS ADC 3 rotation A stage position in FCRS<sub>MODHIS-POA3</sub> coordinates."
        type        = double
        units       = degrees
      }
      {
        name        = rotation3B
        description = "target OIWFS ADC 3 rotation B stage position in FCRS<sub>MODHIS-POA3</sub> coordinates."
        type        = double
        units       = degrees
      }
    ]
  }

  {
    name            = setAdc
    description     = """Position the OIWFS ADCs based on specified power and orientation. (calibration)

At least one input parameter must be specified, an unspecified value will remain unchanged.

The ADC stages must be datumed otherwise this command will fail.  This command is used  for calibration.  It allows the user to set the ADC prisms based on a power and orientation.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move1 = true
<li> state.move2 = true
<li> state.move3 = true
<li> target.power1 = {as given}
<li> target.orientation1 = {as given}
<li> target.power2 = {as given}
<li> target.orientation2 = {as given}
<li> target.power3 = {as given}
<li> target.orientation3 = {as given}
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move1 = false
<li> state.onTarget1 = true
<li> state.move2 = false
<li> state.onTarget2 = true
<li> state.move3 = false
<li> state.onTarget3 = true
<li> current.rotation1A {set based on current location}
<li> current.rotation1B {set based on current location}
<li> current.power1 = {set to current value}
<li> current.orientation1 = {set to current value}
<li> current.rotation2A {set based on current location}
<li> current.rotation2B {set based on current location}
<li> current.power2 = {set to current value}
<li> current.orientation2 = {set to current value}
<li> current.rotation3A {set based on current location}
<li> current.rotation3B {set based on current location}
<li> current.power3 = {set to current value}
<li> current.orientation3 = {set to current value}
</ul>"""
    args = [
      {
        name        = power1
        description = "target ADC 1 power (differential prism rotation, TBD)"
        type        = double
        units       = degrees
      }
      {
        name        = orientation1
        description = "target ADC 1 orientation (mean prism rotation) in FCRS<sub>MODHIS-ROT</sub>"
        type        = double
        units       = degrees
      }
      {
        name        = power2
        description = "target ADC 2 power (differential prism rotation, TBD)"
        type        = double
        units       = degrees
      }
      {
        name        = orientation2
        description = "target ADC 2 orientation (mean prism rotation in FCRS<sub>MODHIS-ROT</sub>"
        type        = double
        units       = degrees
      }
      {
        name        = power3
        description = "target ADC 3 power (differential prism rotation, TBD)"
        type        = double
        units       = degrees
      }
      {
        name        = orientation3
        description = "target ADC 3 orientation (mean prism rotation) in FCRS<sub>MODHIS-ROT</sub>"
        type        = double
        units       = degrees
      }
    ]
  }

  {
    name            = setAdcDispersion
    description     = """Position the OIWFS ADC based on specified atmospheric dispersion parameters. (calibration)

This is a discrete command that behaves like the setAdc command, but the power and orientation settings are inferred from dispersion information that mimics information provided by the TCS when following.

At least one input parameter must be specified, an unspecified value will remain unchanged.

The ADC stages must be datumed otherwise this command will fail.  This command is used  for calibration.  It allows the user to set the ADC prisms based on supplied dispersion parameters.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move1 = true
<li> state.move2 = true
<li> state.move3 = true
<li> target.power1 = {as inferred from dispersion parameters}
<li> target.orientation1 = {as inferred from dispersion parameters}
<li> target.power2 = {as inferred from dispersion parameters}
<li> target.orientation2 = {as inferred from dispersion parameters}
<li> target.power3 = {as inferred from dispersion parameters}
<li> target.orientation3 = {as inferred from dispersion parameters}
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move1 = false
<li> state.onTarget1 = true
<li> state.move2 = false
<li> state.onTarget2 = true
<li> state.move3 = false
<li> state.onTarget3 = true
<li> current.power1 = {set to current value}
<li> current.orientation1 = {set to current value}
<li> current.rotation1A {set based on current location}
<li> current.rotation1B {set based on current location}
<li> current.power2 = {set to current value}
<li> current.orientation2 = {set to current value}
<li> current.rotation2A {set based on current location}
<li> current.rotation2B {set based on current location}
<li> current.power3 = {set to current value}
<li> current.orientation3 = {set to current value}
<li> current.rotation3A {set based on current location}
<li> current.rotation3B {set based on current location}
</ul>"""
    args = [
      {
        name        = referenceWavelength1
        description = "The wavelength at which the computed dispersion for ADC 1 is zero, and also the wavelength at which image shifts are to be reported."
        type        = double
        units       = microns
      }
      {
        name        = orientation1
        description = """Orientation of the axis of dispersion to atmospheric refraction for ADC 1 defined in the XY plane of the FCRS<sub>MODHIS-ROT</sub>"""
        type        = double
        minimum     = -180
        maximum     = 180
        units       = degrees
      }
      {
        name        = wavelength1
        description = "An array of wavelengths for ADC 1. Each provided wavelength value must be unique. Range is TBC."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.5
        maximum     = 3.0
        units       = microns
        items       = {
          type      = double
        }
      }
      {
        name        = weight1
        description = "An array of weights for ADC 1 with same dimensions as wavelength. They must sum to 1.0."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.0
        maximum     = 1.0
        items       = {
          type      = double
        }
      }
      {
        name        = dispersion1
        description = "An array of atmospheric dispersion values for ADC 1 evaluated at wavelength1."
        type        = array
        minItems    = 1
        maxItems    = 30
        units       = arcsec on sky
        items       = {
          type      = double
        }
      }

      {
        name        = referenceWavelength2
        description = "The wavelength at which the computed dispersion for ADC 2 is zero, and also the wavelength at which image shifts are to be reported."
        type        = double
        units       = microns
      }
      {
        name        = orientation2
        description = """Orientation of the axis of dispersion to atmospheric refraction for ADC 2 defined in the XY plane of the FCRS<sub>MODHIS-ROT</sub>"""
        type        = double
        minimum     = -180
        maximum     = 180
        units       = degrees
      }
      {
        name        = wavelength2
        description = "An array of wavelengths for ADC 2. Each provided wavelength value must be unique. Range is TBC."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.5
        maximum     = 3.0
        units       = microns
        items       = {
          type      = double
        }
      }
      {
        name        = weight2
        description = "An array of weights for ADC 2 with same dimensions as wavelength. They must sum to 1.0."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.0
        maximum     = 1.0
        items       = {
          type      = double
        }
      }
      {
        name        = dispersion2
        description = "An array of atmospheric dispersion values for ADC 2 evaluated at wavelength2."
        type        = array
        minItems    = 1
        maxItems    = 30
        units       = arcsec on sky
        items       = {
          type      = double
        }
      }

      {
        name        = referenceWavelength3
        description = "The wavelength at which the computed dispersion for ADC 3 is zero, and also the wavelength at which image shifts are to be reported."
        type        = double
        units       = microns
      }
      {
        name        = orientation3
        description = """Orientation of the axis of dispersion to atmospheric refraction for ADC 3 defined in the XY plane of the FCRS<sub>MODHIS-ROT</sub>"""
        type        = double
        minimum     = -180
        maximum     = 180
        units       = degrees
      }
      {
        name        = wavelength3
        description = "An array of wavelengths for ADC 3. Each provided wavelength value must be unique. Range is TBC."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.5
        maximum     = 3.0
        units       = microns
        items       = {
          type      = double
        }
      }
      {
        name        = weight3
        description = "An array of weights for ADC 3 with same dimensions as wavelength. They must sum to 1.0."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.0
        maximum     = 1.0
        items       = {
          type      = double
        }
      }
      {
        name        = dispersion3
        description = "An array of atmospheric dispersion values for ADC 3 evaluated at wavelength3."
        type        = array
        minItems    = 1
        maxItems    = 30
        units       = arcsec on sky
        items       = {
          type      = double
        }
      }

    ]
  }

  {
    name            = dispersionOverride
    description     = """Sets the dispersion parameter override variables. (calibration)

This command does not stop the follow mode. The command sets the local variable used to override the dispersion stream from the TCS. See follow command for more details.

Any value not overriden will revert to whatever is published by the TCS.

*Friendly Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> none
</ul>"""
    args = [

      {
        name        = referenceWavelength1
        description = "The wavelength at which the computed dispersion for ADC 1 is zero, and also the wavelength at which image shifts are to be reported."
        type        = double
        units       = microns
      }
      {
        name        = orientation1
        description = """Orientation of the axis of dispersion to atmospheric refraction for ADC 1 defined in the XY plane of the FCRS<sub>MODHIS-ROT</sub>"""
        type        = double
        minimum     = -180
        maximum     = 180
        units       = degrees
      }
      {
        name        = wavelength1
        description = "An array of wavelengths for ADC 1. Each provided wavelength value must be unique. Range is TBC."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.5
        maximum     = 3.0
        units       = microns
        items       = {
          type      = double
        }
      }
      {
        name        = weight1
        description = "An array of weights for ADC 1 with same dimensions as wavelength. They must sum to 1.0."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.0
        maximum     = 1.0
        items       = {
          type      = double
        }
      }
      {
        name        = dispersion1
        description = "An array of atmospheric dispersion values for ADC 1 evaluated at wavelength1."
        type        = array
        minItems    = 1
        maxItems    = 30
        units       = arcsec on sky
        items       = {
          type      = double
        }
      }

      {
        name        = referenceWavelength2
        description = "The wavelength at which the computed dispersion for ADC 2 is zero, and also the wavelength at which image shifts are to be reported."
        type        = double
        units       = microns
      }
      {
        name        = orientation2
        description = """Orientation of the axis of dispersion to atmospheric refraction for ADC 2 defined in the XY plane of the FCRS<sub>MODHIS-ROT</sub>"""
        type        = double
        minimum     = -180
        maximum     = 180
        units       = degrees
      }
      {
        name        = wavelength2
        description = "An array of wavelengths for ADC 2. Each provided wavelength value must be unique. Range is TBC."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.5
        maximum     = 3.0
        units       = microns
        items       = {
          type      = double
        }
      }
      {
        name        = weight2
        description = "An array of weights for ADC 2 with same dimensions as wavelength. They must sum to 1.0."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.0
        maximum     = 1.0
        items       = {
          type      = double
        }
      }
      {
        name        = dispersion2
        description = "An array of atmospheric dispersion values for ADC 2 evaluated at wavelength2."
        type        = array
        minItems    = 1
        maxItems    = 30
        units       = arcsec on sky
        items       = {
          type      = double
        }
      }

      {
        name        = referenceWavelength3
        description = "The wavelength at which the computed dispersion for ADC 3 is zero, and also the wavelength at which image shifts are to be reported."
        type        = double
        units       = microns
      }
      {
        name        = orientation3
        description = """Orientation of the axis of dispersion to atmospheric refraction for ADC 3 defined in the XY plane of the FCRS<sub>MODHIS-ROT</sub>"""
        type        = double
        minimum     = -180
        maximum     = 180
        units       = degrees
      }
      {
        name        = wavelength3
        description = "An array of wavelengths for ADC 3. Each provided wavelength value must be unique. Range is TBC."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.5
        maximum     = 3.0
        units       = microns
        items       = {
          type      = double
        }
      }
      {
        name        = weight3
        description = "An array of weights for ADC 3 with same dimensions as wavelength. They must sum to 1.0."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.0
        maximum     = 1.0
        items       = {
          type      = double
        }
      }
      {
        name        = dispersion3
        description = "An array of atmospheric dispersion values for ADC 3 evaluated at wavelength3."
        type        = array
        minItems    = 1
        maxItems    = 30
        units       = arcsec on sky
        items       = {
          type      = double
        }
      }

    ]
  }

  {
    name            = follow
    description     = """Enable the OIWFS ADC follow mode. 

When the follow mode is enabled, the OIWFS ADC will track the dispersion parameters from the TCS or local override dispersion parameters set by the dispersionOverride command. Corrections from the NRTC may optionally be included (through ellipticity measurements of the OIWFS).

The behaviour of any ADC with no command arguments will remain unchanged.

The ADC stages must be datumed otherwise this command will fail.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move1 = true
<li> state.move2 = true
<li> state.move3 = true
</ul>
At Completion:
<ul>
<li> state.cmd = CONTINUOUS
<li> state.move1 = true | false
<li> state.onTarget1 = true
<li> state.move2 = true | false
<li> state.onTarget2 = true
<li> state.move3 = true | false
<li> state.onTarget3 = true
<li> state.stream =  {input stream}
</ul>"""
    args = [
      {
        name        = mode
        description = "Set the follow mode for each of the three ADCs"
        type = array
        dimensions: [3]
        items = {
          type        = boolean
        }
      }
      {
        name        = nrtcOffset
        description = "Indicate whether each of the three ADCs will incorporate offsets from the NRTC."
        type = array
        dimensions: [3]
        items = {
          type        = boolean
        }
      }
    ]
  }

  {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation for turning off the OIWFS Component Controller server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

]
